
CREATE TABLE IF NOT EXISTS users
(
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    email VARCHAR(255) CHECK (LENGTH(email) >= 6) UNIQUE NOT NULL,
    name VARCHAR(255) CHECK (LENGTH(name) >= 2) UNIQUE NOT NULL
);

CREATE TABLE IF NOT EXISTS categories
(
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR(255) NOT NULL UNIQUE
);

CREATE TABLE IF NOT EXISTS locations
(
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    lat FLOAT8 UNIQUE,
    lon FLOAT8 UNIQUE
);

CREATE TABLE IF NOT EXISTS compilations
(
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    pinned BOOLEAN DEFAULT FALSE,
    title VARCHAR(50) CHECK (LENGTH(title) >= '1'::INTEGER) UNIQUE NOT NULL
);

CREATE TABLE IF NOT EXISTS events
(
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    annotation VARCHAR(2000) CHECK (LENGTH(annotation) >= 20) NOT NULL,
    category_id BIGINT REFERENCES categories(id) ON DELETE RESTRICT,
    description VARCHAR(7000) CHECK (LENGTH(description) >= 20) NOT NULL,
    created_on TIMESTAMP NOT NULL,
    published_on TIMESTAMP,
    event_date TIMESTAMP NOT NULL,
    location_id BIGINT REFERENCES locations(id),
    initiator_id BIGINT REFERENCES users(id) ON DELETE CASCADE,
    paid BOOLEAN DEFAULT FALSE,
    participant_limit INT DEFAULT 0,
    confirmed_requests INTEGER,
    request_moderation BOOLEAN DEFAULT TRUE,
    state VARCHAR(12) NOT NULL,
    title VARCHAR(120) CHECK(LENGTH(title) >= 3) NOT NULL
);

CREATE TABLE IF NOT EXISTS compilation_event
(
    event_id BIGINT REFERENCES events(id) NOT NULL,
    compilation_id BIGINT REFERENCES compilations(id) NOT NULL,
    CONSTRAINT compilation_event_pk PRIMARY KEY(event_id, compilation_id)
);

CREATE TABLE IF NOT EXISTS requests
(
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    event_id BIGINT REFERENCES events(id) ON DELETE CASCADE,
    requester_id BIGINT REFERENCES users(id) ON DELETE CASCADE,
    status VARCHAR(12) NOT NULL,
    created TIMESTAMP NOT NULL,
    CONSTRAINT uq_request_user_event UNIQUE(event_id, requester_id)
);